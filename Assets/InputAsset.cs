//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAsset"",
    ""maps"": [
        {
            ""name"": ""Battlefield"",
            ""id"": ""e717d96b-afc9-4444-9185-502237350a32"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""db3ec088-3015-487c-b96f-3a3a5d07a1c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""e8de42da-f370-4b1d-a86a-dfac74ef1b24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5bebdef-2459-4de5-b81a-786b8022af53"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50435f63-25c8-404c-8ace-8f4136c62454"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""M&K"",
            ""bindingGroup"": ""M&K"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Battlefield
        m_Battlefield = asset.FindActionMap("Battlefield", throwIfNotFound: true);
        m_Battlefield_Confirm = m_Battlefield.FindAction("Confirm", throwIfNotFound: true);
        m_Battlefield_Back = m_Battlefield.FindAction("Back", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Battlefield
    private readonly InputActionMap m_Battlefield;
    private IBattlefieldActions m_BattlefieldActionsCallbackInterface;
    private readonly InputAction m_Battlefield_Confirm;
    private readonly InputAction m_Battlefield_Back;
    public struct BattlefieldActions
    {
        private @InputAsset m_Wrapper;
        public BattlefieldActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_Battlefield_Confirm;
        public InputAction @Back => m_Wrapper.m_Battlefield_Back;
        public InputActionMap Get() { return m_Wrapper.m_Battlefield; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattlefieldActions set) { return set.Get(); }
        public void SetCallbacks(IBattlefieldActions instance)
        {
            if (m_Wrapper.m_BattlefieldActionsCallbackInterface != null)
            {
                @Confirm.started -= m_Wrapper.m_BattlefieldActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_BattlefieldActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_BattlefieldActionsCallbackInterface.OnConfirm;
                @Back.started -= m_Wrapper.m_BattlefieldActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_BattlefieldActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_BattlefieldActionsCallbackInterface.OnBack;
            }
            m_Wrapper.m_BattlefieldActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }
        }
    }
    public BattlefieldActions @Battlefield => new BattlefieldActions(this);
    private int m_MKSchemeIndex = -1;
    public InputControlScheme MKScheme
    {
        get
        {
            if (m_MKSchemeIndex == -1) m_MKSchemeIndex = asset.FindControlSchemeIndex("M&K");
            return asset.controlSchemes[m_MKSchemeIndex];
        }
    }
    public interface IBattlefieldActions
    {
        void OnConfirm(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
}
